/**
 * Create a tag element that can be added into the page.
 * A click event will be automatically wired up, allowing
 * the tag to be removed from the page if the delete button
 * is clicked.
 *
 * @param {String} content Text to be displayed in the tag
 * @return {HTMLSpanElement} A span element representing the tag
 */
function create_tag_element(content) {
    let tag = document.createElement("span");
    tag.classList.add('tag');

    // Add a nice tag icon
    tag.append(document.createElement("i"));
    tag.lastChild.classList.add('fas', 'fa-tag');

    // Add text to the tag
    tag.append(document.createElement("span"));
    tag.lastChild.innerText = content;

    // Add the delete button to the tag
    // This is wrapped in a span so that click events are preserved
    tag.append(document.createElement("span"));
    tag.lastChild.append(document.createElement("i"));
    tag.lastChild.lastChild.classList.add('fas', 'fa-times-circle');

    // TODO (Part 7): When the delete button span is clicked, remove the whole tag

    return tag;
}

/**
 * Create a comment element that can be inserted below an article using information
 * from a comment object
 *
 * @param {({author: string, message: string})} comment_object Comment object from JSON
 *        input containing author and message fields
 * @return {HTMLDivElement} A comment element containing the author and message body
 */
function create_comment_element(comment_object) {
    console.log("111")
    let comment_element = document.createElement("div");
    comment_element.classList.add("comment");

    comment_element.appendChild(document.createElement("p"));
    comment_element.lastChild.textContent = comment_object.message;

    comment_element.appendChild(document.createElement("p"));
    comment_element.lastChild.innerText = `By: ${comment_object.author}`;


    return comment_element;
}

/**
 * Create an article element from a provided article object
 *
 * @param {({})} article_object Article object from JSON input
 * @return {HTMLDivElement} An article element ready to be inserted into the page
 */
function create_article_element(article_object, id) {
    let article_element = document.createElement("div");
    article_element.classList.add("article");

    // TODO (Part 3): You may want to modify the function
    //  so that it is supplied with some sort of identifier

    // Title
    // article_element.append(document.createElement("h1"));
    let h1 = document.createElement("h1")
    h1.id = id
    article_element.append(h1)
    article_element.lastChild.innerText = article_object.title;

    // TODO (Part 5): Populate the article div with information
    //  from the `article_object` as shown in the screenshot
    let h2 = document.createElement("h2")
    let h3 = document.createElement("h3")

    let div1 = document.createElement("div")  // tags
    let span1 = document.createElement("span")
    let span2 = document.createElement("span")

    let div2 = document.createElement("div")
    for(let j = 0; j < article_object.body.length; j++){
        let p = document.createElement("p")
        p.innerText = article_object.body[j];
        div2.appendChild(p)
    }



    span1.className = "tag"
    span2.className = "tag"
    h2.innerText = "By:" + article_object.author
    h3.innerText = "Published: " + article_object.date

    span1.innerText = article_object.tags[0] + "    X"
    span2.innerText = article_object.tags[1] + "    X"
    span1.addEventListener("click", function(){
        span1.style.display = 'none'
    })
    span2.addEventListener("click", function(){
        span2.style.display = 'none'
    })
    div1.appendChild(span1)
    div1.appendChild(span2)

    
    

    article_element.append(h2);
    article_element.append(h3);
    article_element.append(div1);
    article_element.append(div2);

    

    article_element.append(document.createElement("hr"));

    let comment_holder_element = document.createElement("div");
    let show_comment_button = document.createElement("div");
    show_comment_button.classList.add("show-comment");
    show_comment_button.appendChild(document.createElement("p"));
    show_comment_button.lastChild.innerText = "Click here to load comments";

    // TODO (Part 6): When the user clicks the show_comment_button, replace the button
    //  with comment elements generated by `create_comment_element`
    show_comment_button.addEventListener('click', function(){
        comment_holder_element.style.display = 'none'
        div10.style.display = 'block'
    })
    let div10 = document.createElement("div")
    console.log(create_comment_element(article_object.comments))
    for(let i = 0; i < article_object.comments.length; i++){
        let comment = create_comment_element(article_object.comments[i])
        div10.appendChild(comment)
    }
    article_element.append(div10)
    div10.style.display = 'none'
    

    comment_holder_element.appendChild(show_comment_button);
    article_element.append(comment_holder_element);

    return article_element;
}

/**
 * Generate an element that can be inserted into the navigation area of the page
 *
 * @param {String} article_title The title of the article, to be used as the link text
 * @return {HTMLLIElement} An HTML ListItem element containing a link to an article
 */
function create_navigation_entry(article_title, id) {
    let entry = document.createElement("li");

    // entry.append(document.createElement("a"));
    let a = document.createElement("a")
    a.href = "#" + id
    entry.append(a)
    entry.lastChild.innerText = article_title;

    // TODO (Part 3): When this link is clicked, it should scroll the browser
    //  to where the article is on the page. HINT, you may want to modify the function
    //  so that it is supplied with some sort of identifier
    

    return entry;
}

/**
 * Insert a provided article element into the content area of the page.
 *
 * @param {HTMLDivElement} article_element Article element to insert into the page
 *
 * @see create_article_element Function that generates insertable article elements
 */
function insert_article(article_element) {
    document.querySelector("div.body").append(article_element);
}

/**
 * Insert a provided navigation entry into the navigation list on the page
 *
 * @param {HTMLLIElement} navigation_entry Navigation element to insert into the page
 *
 * @see create_navigation_entry Function that generates insertable navigation elements
 */
function insert_navigation(navigation_entry, i) {
    let nav_list = document.querySelector(".container > nav > div > ul");

    // TODO (Part 4): Insert the entry into the navigation list between the `Top` and `Bottom` elements
    nav_list.appendChild(navigation_entry); // Replace me!
    if(i == '3'){
        var node=document.querySelectorAll(".container > nav > div > ul > li")[1];
        nav_list.appendChild(node)
    }
}


// TODO (Part 1): When the page loads, populate the page with articles and navigation
//  entries using the `create_article_element`, `insert_article`, `create_navigation_entry`,
//  and `insert_navigation` functions
window.addEventListener("load",function(){
    // console.log(INPUT_JSON)
    for(let i = 0; i < INPUT_JSON.length; i++){
        let article = create_article_element(INPUT_JSON[i], i.toString())
        insert_article(article)

        let nav = create_navigation_entry(INPUT_JSON[i].title, i.toString())
        insert_navigation(nav, i.toString())
    }
 })
